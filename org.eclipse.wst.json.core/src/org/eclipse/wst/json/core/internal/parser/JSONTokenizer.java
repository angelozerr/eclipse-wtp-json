/* The following code was generated by JFlex 1.2.2 on 15/02/15 17:47 */

/*******************************************************************************
 * Copyright (c) 2004, 2012 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

package org.eclipse.wst.json.core.internal.parser;

import java.io.CharArrayReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.wst.sse.core.internal.ltk.parser.BlockMarker;
import org.eclipse.wst.sse.core.internal.ltk.parser.BlockTokenizer;
import org.eclipse.wst.sse.core.internal.provisional.text.ITextRegion;
import org.eclipse.wst.sse.core.internal.util.Debug;
import org.eclipse.wst.sse.core.utils.StringUtils;
import org.eclipse.wst.json.core.internal.Logger;
import org.eclipse.wst.json.core.internal.parser.regions.JSONParserRegionFactory;
import org.eclipse.wst.json.core.internal.regions.JSONRegionContext;


/**
 * This class is a scanner generated by 
 * <a href="http://www.informatik.tu-muenchen.de/~kleing/jflex/">JFlex</a> 1.2.2
 * on 15/02/15 17:47 from the specification file
 * <tt>file:/D:/_Projects/Personal/JSONEditor/org.eclipse.wst.json.core/Resource/parserTools/highlighting/JSONTokenizer.jflex</tt>
 */
public class JSONTokenizer implements BlockTokenizer, JSONRegionContext {

  /** this character denotes the end of file */
  final public static int YYEOF = -1;

  /** lexical states */
  final public static int ST_JSON_ELEMENT_DECLARATION = 9;
  final public static int ST_JSON_ELEMENT_DECLARATION_CONTENT = 10;
  final public static int ST_JSON_ATTLIST_DECLARATION = 11;
  final public static int ST_JSON_DECLARATION_CLOSE = 8;
  final public static int ST_JSON_ATTRIBUTE_NAME = 4;
  final public static int ST_JSON_COMMENT_END = 2;
  final public static int ST_JSON_TAG_NAME = 3;
  final public static int ST_JSON_ATTLIST_DECLARATION_CONTENT = 12;
  final public static int ST_JSON_COMMENT = 1;
  final public static int ST_JSON_ATTRIBUTE_VALUE = 6;
  final public static int ST_JSON_DOCTYPE_ID_PUBLIC = 8;
  final public static int ST_JSON_DOCTYPE_DECLARATION = 8;
  final public static int ST_JSON_DECLARATION = 7;
  final public static int ST_JSON_EQUALS = 5;
  final public static int ST_JSON_DOCTYPE_EXTERNAL_ID = 8;
  final public static int ST_JSON_DOCTYPE_ID_SYSTEM = 8;
  final public static int ST_BLOCK_TAG_SCAN = 13;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\7\1\22\2\0\1\16\22\0\1\16\1\21\1\13\1\27"+
    "\1\6\1\20\1\14\1\15\1\6\1\6\1\6\1\6\1\6\1\11"+
    "\1\10\1\4\12\17\1\12\1\30\1\3\1\26\1\5\1\6\1\1"+
    "\1\25\1\25\1\25\1\25\1\25\1\25\1\23\1\23\1\23\1\23"+
    "\1\23\1\23\1\23\1\23\1\23\1\23\1\23\1\23\1\23\1\23"+
    "\1\23\2\23\1\23\1\23\1\23\1\0\1\0\1\0\1\0\1\12"+
    "\1\0\1\25\1\25\1\25\1\25\1\25\1\25\1\23\1\23\1\23"+
    "\1\23\1\23\1\23\1\23\1\23\1\23\2\23\1\23\1\23\1\23"+
    "\1\23\1\23\1\23\1\24\1\23\1\23\1\0\1\0\1\2\71\0"+
    "\1\32\10\0\27\31\1\0\37\31\1\0\72\31\2\0\13\31\2\0"+
    "\10\31\1\0\65\31\1\0\104\31\11\0\44\31\3\0\2\31\4\0"+
    "\36\31\70\0\131\31\22\0\7\31\16\0\2\32\56\0\106\32\32\0"+
    "\2\32\44\0\1\31\1\32\3\31\1\0\1\31\1\0\24\31\1\0"+
    "\54\31\1\0\7\31\3\0\1\31\1\0\1\31\1\0\1\31\1\0"+
    "\1\31\1\0\22\31\15\0\14\31\1\0\102\31\1\0\14\31\1\0"+
    "\44\31\1\0\4\32\11\0\65\31\2\0\2\31\2\0\2\31\3\0"+
    "\34\31\2\0\10\31\2\0\2\31\67\0\46\31\2\0\1\31\7\0"+
    "\46\31\12\0\21\32\1\0\27\32\1\0\3\32\1\0\1\32\1\0"+
    "\2\32\1\0\1\32\13\0\33\31\5\0\3\31\56\0\32\31\5\0"+
    "\1\32\12\31\10\32\15\0\12\32\6\0\1\32\107\31\2\0\5\31"+
    "\1\0\17\31\1\0\4\31\1\0\1\31\17\32\2\31\2\32\1\0"+
    "\4\32\2\0\12\32\u0207\0\3\32\1\0\65\31\2\0\1\32\1\31"+
    "\20\32\3\0\4\32\3\0\12\31\2\32\2\0\12\32\21\0\3\32"+
    "\1\0\10\31\2\0\2\31\2\0\26\31\1\0\7\31\1\0\1\31"+
    "\3\0\4\31\2\0\1\32\1\0\7\32\2\0\2\32\2\0\3\32"+
    "\11\0\1\32\4\0\2\31\1\0\3\31\2\32\2\0\12\32\2\31"+
    "\20\0\1\32\2\0\6\31\4\0\2\31\2\0\26\31\1\0\7\31"+
    "\1\0\2\31\1\0\2\31\1\0\2\31\2\0\1\32\1\0\5\32"+
    "\4\0\2\32\2\0\3\32\13\0\4\31\1\0\1\31\7\0\12\32"+
    "\2\32\3\31\14\0\3\32\1\0\7\31\1\0\1\31\1\0\3\31"+
    "\1\0\26\31\1\0\7\31\1\0\2\31\1\0\5\31\2\0\1\32"+
    "\1\31\10\32\1\0\3\32\1\0\3\32\22\0\1\31\5\0\12\32"+
    "\21\0\3\32\1\0\10\31\2\0\2\31\2\0\26\31\1\0\7\31"+
    "\1\0\2\31\2\0\4\31\2\0\1\32\1\31\6\32\3\0\2\32"+
    "\2\0\3\32\10\0\2\32\4\0\2\31\1\0\3\31\4\0\12\32"+
    "\22\0\2\32\1\0\6\31\3\0\3\31\1\0\4\31\3\0\2\31"+
    "\1\0\1\31\1\0\2\31\3\0\2\31\3\0\3\31\3\0\10\31"+
    "\1\0\3\31\4\0\5\32\3\0\3\32\1\0\4\32\11\0\1\32"+
    "\17\0\11\32\21\0\3\32\1\0\10\31\1\0\3\31\1\0\27\31"+
    "\1\0\12\31\1\0\5\31\4\0\7\32\1\0\3\32\1\0\4\32"+
    "\7\0\2\32\11\0\2\31\4\0\12\32\22\0\2\32\1\0\10\31"+
    "\1\0\3\31\1\0\27\31\1\0\12\31\1\0\5\31\4\0\7\32"+
    "\1\0\3\32\1\0\4\32\7\0\2\32\7\0\1\31\1\0\2\31"+
    "\4\0\12\32\22\0\2\32\1\0\10\31\1\0\3\31\1\0\27\31"+
    "\1\0\20\31\4\0\6\32\2\0\3\32\1\0\4\32\11\0\1\32"+
    "\10\0\2\31\4\0\12\32\221\0\56\31\1\0\1\31\1\32\2\31"+
    "\7\32\5\0\6\31\1\32\10\32\1\0\12\32\47\0\2\31\1\0"+
    "\1\31\2\0\2\31\1\0\1\31\2\0\1\31\6\0\4\31\1\0"+
    "\7\31\1\0\3\31\1\0\1\31\1\0\1\31\2\0\2\31\1\0"+
    "\2\31\1\0\1\31\1\32\2\31\6\32\1\0\2\32\1\31\2\0"+
    "\5\31\1\0\1\32\1\0\6\32\2\0\12\32\76\0\2\32\6\0"+
    "\12\32\13\0\1\32\1\0\1\32\1\0\1\32\4\0\2\32\10\31"+
    "\1\0\41\31\7\0\24\32\1\0\6\32\4\0\6\32\1\0\1\32"+
    "\1\0\25\32\3\0\7\32\1\0\1\32\346\0\46\31\12\0\47\31"+
    "\11\0\1\31\1\0\2\31\1\0\3\31\1\0\1\31\1\0\2\31"+
    "\1\0\5\31\51\0\1\31\1\0\1\31\1\0\1\31\13\0\1\31"+
    "\1\0\1\31\1\0\1\31\3\0\2\31\3\0\1\31\5\0\3\31"+
    "\1\0\1\31\1\0\1\31\1\0\1\31\1\0\1\31\3\0\2\31"+
    "\3\0\2\31\1\0\1\31\50\0\1\31\11\0\1\31\2\0\1\31"+
    "\2\0\2\31\7\0\2\31\1\0\1\31\1\0\7\31\50\0\1\31"+
    "\4\0\1\31\10\0\1\31\u0c06\0\234\31\4\0\132\31\6\0\26\31"+
    "\2\0\6\31\2\0\46\31\2\0\6\31\2\0\10\31\1\0\1\31"+
    "\1\0\1\31\1\0\1\31\1\0\37\31\2\0\65\31\1\0\7\31"+
    "\1\0\1\31\3\0\3\31\1\0\7\31\3\0\4\31\2\0\6\31"+
    "\4\0\15\31\5\0\3\31\1\0\7\31\323\0\15\32\4\0\1\32"+
    "\104\0\1\31\3\0\2\31\2\0\1\31\121\0\3\31\u0e82\0\1\32"+
    "\1\0\1\31\31\0\11\31\6\32\1\0\5\32\13\0\124\31\4\0"+
    "\2\32\2\0\2\32\2\0\132\31\1\0\3\32\6\0\50\31\u1cd3\0"+
    "\u51a6\31\u0c5a\0\u2ba4\31\134\0\u0800\0\u1ffe\0\2\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    27,    54,    81,   108,   135,   162,   189,   216,   243, 
      270,   297,   324,   351,   378,   378,   405,   432,   459,   378, 
      378,   486,   513,   513,   540,   567,   594,   621,   648,   378, 
      675,   702,   729,   378,   756,   756,   783,   810,   837,   378, 
      864,   864,   891,   918,   945,   972,   972,   999,  1026,  1053, 
      378,   378,  1080,  1107,  1134,  1161,  1188,  1215,   648,   378, 
     1242,   567,  1269,   756,  1296,   810,   378,  1323,   837,   864, 
     1350,   891,   378,  1377,  1404,  1431,  1404,  1458,  1485,   972, 
     1512,   999,   378,  1539,  1566,  1593,  1566,  1620,  1647,  1674, 
      378,  1701,  1728,   378,   378,   378,  1377,  1755,  1755,  1539, 
     1782,  1782,   378,   378,  1809,  1458,  1620
  };

  /** 
   * The packed transition table of the DFA
   */
  final private static String yy_packed = 
    "\1\17\1\20\1\17\1\21\10\17\1\22\3\17\1\23"+
    "\1\17\1\24\10\17\33\25\11\17\1\26\10\17\1\24"+
    "\10\17\1\27\1\30\1\27\1\21\1\31\1\17\1\27"+
    "\1\32\3\27\1\33\1\27\1\34\1\32\3\27\1\32"+
    "\3\35\3\27\1\35\1\27\1\17\1\20\1\36\1\21"+
    "\1\37\2\17\1\40\2\17\1\41\3\17\1\40\3\17"+
    "\1\40\3\41\3\17\1\41\2\17\1\20\1\36\1\21"+
    "\1\37\2\17\1\40\2\17\1\41\3\17\1\40\3\17"+
    "\1\40\3\41\1\42\2\17\1\41\1\17\1\43\1\44"+
    "\1\43\1\21\1\45\1\17\1\43\1\40\3\43\1\46"+
    "\1\43\1\47\1\40\3\43\1\40\10\43\1\17\1\20"+
    "\1\50\1\21\3\17\1\40\6\17\1\40\3\17\1\40"+
    "\12\17\1\50\4\17\1\40\6\17\1\40\3\17\1\40"+
    "\10\17\3\51\1\17\1\52\1\17\1\51\1\40\3\51"+
    "\1\53\1\51\1\54\1\40\3\51\1\40\10\51\5\55"+
    "\1\17\25\55\3\56\1\17\1\57\1\17\1\56\1\40"+
    "\3\56\1\60\1\56\1\61\1\40\3\56\1\40\10\56"+
    "\5\62\1\17\25\62\33\63\37\0\1\64\14\0\1\65"+
    "\23\0\1\66\10\0\3\66\1\0\1\67\1\0\1\66"+
    "\13\0\1\70\5\0\1\71\2\0\3\70\3\0\1\70"+
    "\12\0\1\72\21\0\3\27\1\0\1\73\1\0\1\27"+
    "\1\32\3\27\1\32\1\27\2\32\3\27\1\32\3\35"+
    "\3\27\1\35\1\27\3\35\1\0\1\73\1\74\1\35"+
    "\1\0\3\35\1\0\1\35\2\0\3\35\1\0\10\35"+
    "\3\32\3\0\15\32\3\0\3\32\1\0\1\32\3\33"+
    "\3\75\5\33\1\76\7\33\3\75\3\33\1\75\1\33"+
    "\3\34\3\77\7\34\1\76\5\34\3\77\3\34\1\77"+
    "\1\34\3\35\1\0\1\73\1\0\1\35\1\0\3\35"+
    "\1\0\1\35\2\0\3\35\1\0\10\35\5\0\1\74"+
    "\34\0\1\40\6\0\1\40\3\0\1\40\20\0\3\41"+
    "\4\0\1\41\3\0\3\41\3\0\2\41\3\43\1\0"+
    "\1\100\1\0\1\43\1\0\3\43\1\0\1\43\2\0"+
    "\3\43\1\0\13\43\1\0\1\100\1\74\1\43\1\0"+
    "\3\43\1\0\1\43\2\0\3\43\1\0\10\43\3\46"+
    "\1\101\1\102\1\101\1\46\1\101\3\46\1\103\1\46"+
    "\2\101\3\46\1\101\10\46\3\47\1\104\1\105\1\104"+
    "\1\47\1\104\3\47\1\104\1\47\1\103\1\104\3\47"+
    "\1\104\10\47\3\51\1\0\1\106\1\0\1\51\1\0"+
    "\3\51\1\0\1\51\2\0\3\51\1\0\10\51\3\53"+
    "\1\107\1\110\1\107\1\53\1\107\3\53\1\111\1\53"+
    "\2\107\3\53\1\107\10\53\1\112\1\113\1\112\1\114"+
    "\1\115\1\114\1\113\1\114\3\113\1\114\1\112\1\116"+
    "\1\117\3\113\1\117\6\113\2\112\5\55\1\0\25\55"+
    "\3\56\1\0\1\120\1\0\1\56\1\0\3\56\1\0"+
    "\1\56\2\0\3\56\1\0\10\56\3\60\1\121\1\122"+
    "\1\121\1\60\1\121\3\60\1\123\1\60\2\121\3\60"+
    "\1\121\10\60\1\124\1\125\1\124\1\126\1\127\1\126"+
    "\1\125\1\126\3\125\1\126\1\124\1\130\1\131\3\125"+
    "\1\131\6\125\2\124\5\62\1\0\25\62\11\0\1\132"+
    "\31\0\3\66\4\0\1\66\3\0\3\66\2\0\1\133"+
    "\2\66\17\0\1\134\4\0\1\135\16\0\3\70\4\0"+
    "\1\70\3\0\3\70\2\0\1\136\2\70\20\0\1\71"+
    "\17\0\1\137\25\0\13\75\1\140\17\75\15\77\1\140"+
    "\15\77\13\101\1\103\17\101\15\104\1\103\15\104\13\107"+
    "\1\111\17\107\3\112\1\114\1\141\1\114\1\112\1\114"+
    "\3\112\1\114\1\112\1\111\1\114\3\112\1\114\13\112"+
    "\1\114\1\141\1\114\1\112\1\114\3\112\1\114\1\112"+
    "\1\142\1\114\3\112\1\114\10\112\15\114\1\111\15\114"+
    "\15\0\1\143\15\0\15\114\1\142\15\114\13\121\1\123"+
    "\17\121\3\124\1\126\1\144\1\126\1\124\1\126\3\124"+
    "\1\126\1\124\1\123\1\126\3\124\1\126\13\124\1\126"+
    "\1\144\1\126\1\124\1\126\3\124\1\126\1\124\1\145"+
    "\1\126\3\124\1\126\10\124\15\126\1\123\15\126\15\0"+
    "\1\146\15\0\15\126\1\145\15\126\11\0\1\147\40\0"+
    "\1\134\10\0\1\150\21\0\1\151\5\0\1\151\6\0"+
    "\1\152\2\0\1\152\1\0\1\152\1\0\3\152\2\0"+
    "\1\116\13\152\3\0\1\153\2\0\1\153\1\0\1\153"+
    "\1\0\3\153\2\0\1\130\13\153\21\0\1\151\5\0"+
    "\1\151\2\0\1\150\2\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack(yy_packed);


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  // final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",		//$NON-NLS-1$
    "Internal error: unknown state",		//$NON-NLS-1$
    "Error: could not match input",		//$NON-NLS-1$
    "Error: pushback value was too large"	//$NON-NLS-1$
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  9,  9, 
     1,  1,  1,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1, 
     1,  9,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  9,  9,  0,  0,  0,  0,  1,  0,  0,  9,  0,  1,  0,  0, 
     0,  0,  9,  0,  0,  0,  0,  0,  9,  1,  1,  0,  0,  1,  0,  0, 
     0,  0,  9,  1,  1,  0,  0,  1,  0,  0,  9,  0,  0,  9,  9,  9, 
     0,  1,  0,  0,  1,  0,  9,  9,  0,  0,  0
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[16384];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  // private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  // private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  // private boolean yy_atBOL;

  /** yy_atEOF == true <=> the scanner has returned a value for EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	private int fTokenCount = 0;
 
	// required holders for white-space compacting
	private boolean fShouldLoadBuffered = false;
	private String fBufferedContext = null;
	private int fBufferedStart = 1;
	private int fBufferedLength = 0;
	private String f_context = null;

	// state stack for handling embedded regions
	private IntStack fStateStack = new IntStack();

	private String context = null;
	private int start = 0;
	private int textLength = 0;
	private int length = 0;

	// offset for tracking position specific block tags
	private int fOffset = 0;
	
	// the name of the current tag being opened
	private String fCurrentTagName = null;

	// the list of tag name BlockMarkers
	private List fBlockMarkers = new ArrayList();

	// required to not seek text blocks on an end tag
	private boolean fIsBlockingEnabled = false;
	private boolean fIsCaseSensitiveBlocking = true;

	private JSONParserRegionFactory fRegionFactory = new JSONParserRegionFactory();
/**
 * user method 
 */
public final void addBlockMarker(BlockMarker marker) {
	if(containsTagName(marker.getTagName()))
		return;
	fBlockMarkers.add(marker);
}
/**
 * user method 
 */
public final void removeBlockMarker(BlockMarker marker) {
	fBlockMarkers.remove(marker);
}
/**
 * user method 
 */
public final void removeBlockMarker(String tagname) {
	if (fBlockMarkers != null) {
		Iterator blocks = fBlockMarkers.iterator();
		while (blocks.hasNext()) {
			if (((BlockMarker) blocks.next()).getTagName().equals(tagname))
				blocks.remove();
		}
	}
}
/* user method */
public final boolean isCaseSensitiveBlocking() {
	return fIsCaseSensitiveBlocking;
}
/* user method */
public final void setCaseSensitiveBlocking(boolean newValue) {
	fIsCaseSensitiveBlocking = newValue;
}
/* user method */
public boolean getBlockMarkerCaseSensitivity() {
        return getBlockMarkerCaseSensitivity(fCurrentTagName);
}
/* user method */
public boolean getBlockMarkerCaseSensitivity(String name) {
	Iterator iterator = fBlockMarkers.iterator();
	while(iterator.hasNext()) {
		BlockMarker marker = (BlockMarker)iterator.next();
		boolean casesensitive = marker.isCaseSensitive();
		if(casesensitive && marker.getTagName().equals(name))
			return casesensitive;
		else if(!casesensitive && marker.getTagName().equalsIgnoreCase(name))
			return casesensitive;
	}
	return true;
}
/* user method */
public String getBlockMarkerContext() {
	return getBlockMarkerContext(fCurrentTagName);
}
/* user method */
public String getBlockMarkerContext(String name) {
	Iterator iterator = fBlockMarkers.iterator();
	while(iterator.hasNext()) {
		BlockMarker marker = (BlockMarker)iterator.next();
		if(marker.getTagName().equals(name))
			return marker.getContext();
	}
	return BLOCK_TEXT;
}
/* user method */
public List getBlockMarkers() {
	return fBlockMarkers;
}
/* user method */
public final int getOffset() {
	return fOffset + yychar;
}
private final boolean isBlockMarker() {
	return isBlockMarker(fCurrentTagName);
}
private final boolean isBlockMarker(String tagName) {
	if (!fIsBlockingEnabled)
		return false;
	return containsTagName(tagName);
}
/**
 * user method
 */
public final void beginBlockTagScan(String newTagName) {
	beginBlockMarkerScan(newTagName, BLOCK_TEXT);
}
/**
 * user method
 *
 * Special tokenizer setup.  Allows tokenization to be initiated at the
 * start of a text block within a "newTagName" tag.
 *
 * Example: 
 *	Tokenizer toker = new Tokenizer();
 *	toker.setCaseSensitiveBlocking(false);
 *	toker.reset(new java.io.StringReader("afiuhqwkejhtasihgalkwhtq</scripter></scr></script>asgdasga"));
 *	toker.beginBlockMarkerScan("script", BLOCK_TEXT);
 *	toker.getRegions(); 
 *
 * Returns:
 *	BLOCK_TEXT: 0-40
 *	JSON_END_TAG_OPEN: 41-42
 *	JSON_TAG_NAME: 43-48
 *	JSON_TAG_CLOSE: 49-49
 *	JSON_CONTENT: 50-57
 *
 */
public final void beginBlockMarkerScan(String newTagName, String blockcontext) {
	yybegin(ST_BLOCK_TAG_SCAN);
	fCurrentTagName = newTagName;
}
/**
 * Method doScan.
 * 
 * Returns a context region for all of the text from the current position upto the end of input or
 * to right *before* the first occurence of searchString
 * 
 * @param searchString - target string to search for ex.: "-->", "</tagname"
 * @param requireTailSeparator - whether the target must be immediately followed by whitespace or '>'
 * @param context - the context of the scanned region if non-zero length
 * @param exitState - the state to go to if the region was of non-zero length
 * @param abortState - the state to go to if the searchString was found immediately
 * @return String - the context found: the desired context on a non-zero length match, the abortContext on immediate success
 * @throws IOException
 */
private final String doScan(String searchString, boolean requireTailSeparator, String searchContext, int exitState, int immediateFallbackState) throws IOException {
	boolean stillSearching = true;
	// Disable further block (probably)
	fIsBlockingEnabled = false;
	int searchStringLength = searchString.length();
	int n = 0;
	char lastCheckChar;
	int i;
	boolean same = false;
	while (stillSearching) {
		n = 0;
		// Ensure that enough data from the input exists to compare against the search String.
		n = yy_advance();
		while(n != YYEOF && yy_currentPos < searchStringLength)
			n = yy_advance();
		// If the input was too short or we've exhausted the input, stop immediately.
		if (n == YYEOF) {
			stillSearching = false;
		}
		else {
			same = true;
			// Ensure that we've not encountered a complete block (<%%>) that was *shorter* than the closeTagString and
			// thus found twice at current-targetLength [since the first scan would have come out this far anyway].
			// Check the characters in the target versus the last targetLength characters read from the buffer
			// and see if it matches
			
			// safety check for array accesses (yy_currentPos is the *last* character we can check against)
			if(yy_currentPos >= searchStringLength && yy_currentPos <= yy_buffer.length) {
				for(i = 0; i < searchStringLength; i++) {
					if(same && fIsCaseSensitiveBlocking)
						same = yy_buffer[i + yy_currentPos - searchStringLength] == searchString.charAt(i);
					else if(same && !fIsCaseSensitiveBlocking)
						same = Character.toLowerCase(yy_buffer[i + yy_currentPos - searchStringLength]) == Character.toLowerCase(searchString.charAt(i));
				}
			}
			// safety check failed; no match is possible right now
			else {
				same = false;
			}
			if (same && requireTailSeparator && yy_currentPos < yy_buffer.length) {
				// Additional check for close tags to ensure that targetString="</script" doesn't match
				// "</scriptS"
				lastCheckChar = yy_buffer[yy_currentPos];
				// Succeed on "</script>" and "</script "
				if(lastCheckChar == '>' || Character.isWhitespace(lastCheckChar))
					stillSearching = false;
			}
			else {
				stillSearching = !same || (yy_currentPos < yy_startRead + searchStringLength);
			}
		}
	}
	if (n != YYEOF || same) {
		// We've stopped short of the end or definitely found a match
		yy_markedPos = yy_currentPos - searchStringLength;
		yy_currentPos = yy_markedPos + 1;
		// If the searchString occurs at the very beginning of what would have
		// been a Block, resume scanning normally immediately
		if (yy_markedPos == yy_startRead) {
			yybegin(immediateFallbackState);
			return primGetNextToken();
		}
	}
	else {
		// We ran through the rest of the input
		yy_markedPos = yy_currentPos;
		yy_currentPos++;
	}
	yybegin(exitState);
	// If the ending occurs at the very beginning of what would have
	// been a Block, resume scanning normally immediately
	if(yy_markedPos == yy_startRead)
		return primGetNextToken();
	return searchContext;
}
/**
 * user method
 *
 * A generic lookahead-like operation
 */
private final String doBlockScan(String target, String targetContext, int immediateFallbackState) throws IOException {
	return doScan(target, false, targetContext, immediateFallbackState, immediateFallbackState);
}
/**
 * user method 
 * does a lookahead for the current tag name
 */
private final String doBlockTagScan() throws IOException {
        fIsCaseSensitiveBlocking = getBlockMarkerCaseSensitivity();
	return doScan("</" + fCurrentTagName, true, getBlockMarkerContext(fCurrentTagName), YYINITIAL, YYINITIAL);
}
/**
 * user method
 *
 * Converts the raw context String returned by the primGetNextToken()
 * method into a full ITextRegion by pulling in values for the
 * current offset within the scanning text.
 *
 * Returns null when EOF is encountered and attaches intermittently
 * discovered whitespace onto the end of useful regions.
 *
 * Note that this algorithm caches the token following the one being returned
 * so that whitespace can be collapsed.
 */
public final ITextRegion getNextToken() throws IOException {
	// load the starting non-whitespace token (assume that it is so)
	if (fShouldLoadBuffered) {
		context = fBufferedContext;
		start = fBufferedStart;
		textLength = length = fBufferedLength;
		fShouldLoadBuffered = false;
	}
	else {
		context = primGetNextToken();
		if (context == JSON_TAG_NAME) {
			if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
				fCurrentTagName = yytext();
			else
				fCurrentTagName = null;
		}
		else if (context == JSON_TAG_OPEN) {
			fIsBlockingEnabled = true;
		}
		else if (context == JSON_END_TAG_OPEN) {
			fIsBlockingEnabled = false;
		}
		start = yychar;
		textLength = length = yylength();
		if (yy_atEOF) {
			fTokenCount++;
			return null;
		}
	}
	// store the next token
	f_context = primGetNextToken();
	if (f_context == JSON_TAG_NAME) {
		if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
			fCurrentTagName = yytext();
		else
			fCurrentTagName = null;
	}
	else if (f_context == JSON_TAG_OPEN) {
		fIsBlockingEnabled = true;
	}
	else if (f_context == JSON_END_TAG_OPEN) {
		fIsBlockingEnabled = false;
	}
	fBufferedContext = f_context;
	fBufferedStart = yychar;
	fBufferedLength = yylength();
	fShouldLoadBuffered = true;
	if (fBufferedContext == WHITE_SPACE) {
		fShouldLoadBuffered = false;
		length += fBufferedLength;
	}
	if (context == null) {
		// EOF
		if (Debug.debugTokenizer) {
			System.out.println(getClass().getName() + " discovered " + fTokenCount + " tokens."); //$NON-NLS-2$//$NON-NLS-1$
		}
		return null;
	}
	fTokenCount++;
	return fRegionFactory.createToken(context, start, textLength, length, null, fCurrentTagName);
}
/* user method */
public JSONTokenizer(){
	super();
}
/* user method */
public JSONTokenizer(char[] charArray){
		this(new CharArrayReader(charArray));
}
/* user method */
public void reset(char[] charArray) {
	reset(new CharArrayReader(charArray), 0);
}
/* user method */
public void reset(char[] charArray, int newOffset) {
	reset(new CharArrayReader(charArray), newOffset);
}
/* user method */
public void reset(java.io.InputStream in) {
	reset(new java.io.InputStreamReader(in), 0);
}
/* user method */
public void reset(java.io.InputStream in, int newOffset) {
	reset(new java.io.InputStreamReader(in), newOffset);
}
/* user method */
public void reset(java.io.Reader in) {
	reset(in, 0);
}
/**
 * user method *
 *
 * Reset internal counters and vars to "newly created" values, in the hopes
 * that resetting a pre-existing tokenizer is faster than creating a new one.
 *
 * This method contains code blocks that were essentially duplicated from the
 * <em>generated</em> output of this specification before this method was
 * added.  Those code blocks were under the above copyright.
 */
public void reset(java.io.Reader in, int newOffset) {
	if (Debug.debugTokenizer) {
		System.out.println("resetting tokenizer");//$NON-NLS-1$
	}
	fOffset = newOffset;

	/* the input device */
	yy_reader = in;

	/* the current state of the DFA */
	yy_state = 0;

	/* the current lexical state */
	yy_lexical_state = YYINITIAL;

	/* this buffer contains the current text to be matched and is
	the source of the yytext() string */
	java.util.Arrays.fill(yy_buffer, (char)0);

	/* the textposition at the last accepting state */
	yy_markedPos = 0;

	/* the textposition at the last state to be included in yytext */
	//yy_pushbackPos = 0;

	/* the current text position in the buffer */
	yy_currentPos = 0;

	/* startRead marks the beginning of the yytext() string in the buffer */
	yy_startRead = 0;

	/** 
	 * endRead marks the last character in the buffer, that has been read
	 * from input 
	 */
	yy_endRead = 0;

	/* number of newlines encountered up to the start of the matched text */
	//yyline = 0;

	/* the number of characters up to the start of the matched text */
	yychar = 0;

	/* yy_atEOF == true <=> the scanner has returned a value for EOF */
	yy_atEOF = false;

	/* denotes if the user-EOF-code has already been executed */
	yy_eof_done = false;


	/* user vars: */
	fTokenCount = 0;
 
	fShouldLoadBuffered = false;
	fBufferedContext = null;
	fBufferedStart = 1;
	fBufferedLength = 0;
	fStateStack = new IntStack();

	context = null;
	start = 0;
	textLength = 0;
	length = 0;
}

	/**
	 * user method
	 *
	 */
	public BlockTokenizer newInstance() {
		JSONTokenizer newInstance = new JSONTokenizer();
		// global tagmarkers can be shared; they have no state and 
		// are never destroyed (e.g. 'release')
		for(int i = 0; i < fBlockMarkers.size(); i++) {
			BlockMarker blockMarker = (BlockMarker) fBlockMarkers.get(i);
			if(blockMarker.isGlobal())
				newInstance.addBlockMarker(blockMarker);
		}
		return newInstance;
	}
/* user method */
private final String scanJSONCommentText() throws IOException {
	// Scan for '-->' and return the text up to that point as
	//   JSON_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
	//  case change to the ST_JSON_COMMENT_END state and return the next
	//  context as usual.
	return doScan("-->", false, JSON_COMMENT_TEXT, ST_JSON_COMMENT_END, ST_JSON_COMMENT_END);
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JSONTokenizer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JSONTokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the unpacked transition table
   */
  private static int [] yy_unpack(String packed) {
    int [] trans = new int[1836];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1096) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return trans;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1374) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Gets the next input character.
   *
   * @return      the next character of the input stream, EOF if the
   *              end of the stream is reached.
   * @exception   IOException  if any I/O-Error occurs
   */
  private int yy_advance() throws java.io.IOException {

    /* standard case */
    if (yy_currentPos < yy_endRead) return yy_buffer[yy_currentPos++];

    /* if the eof is reached, we don't need to work hard */ 
    if (yy_atEOF) return YYEOF;

    /* otherwise: need to refill the buffer */

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if ( numRead == -1 ) return YYEOF;

    yy_endRead+= numRead;

    return yy_buffer[yy_currentPos++];
  }

    
  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */
    yy_reader.close();
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }

  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning - from the SED JFlex skeleton
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    try {
      Logger.log(Logger.ERROR, YY_ERROR_MSG[errorCode]);
    }
    catch (ArrayIndexOutOfBoundsException e) {
      Logger.log(Logger.ERROR, YY_ERROR_MSG[YY_UNKNOWN_ERROR]);
    }
    // DO NOT EXIT the VM on an error
    // System.exit(1);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  void yypushback(int number) {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }

	/**
	 * user method - skeleton.sed
	 */
	protected final boolean containsTagName(char[] markerTagName, int offset, int tagnameLength) {
		for(int j = 0; j < fBlockMarkers.size(); j++) {
			BlockMarker marker = (BlockMarker)fBlockMarkers.get(j);
			if(marker.getTagName().length() == tagnameLength) {
				boolean matchesSoFar = true;
				for(int i = 0; i < tagnameLength && matchesSoFar; i++) {
					if(marker.isCaseSensitive()) {
						if(marker.getTagName().charAt(i) != markerTagName[i + offset])
							matchesSoFar = false;
					}
					else {
						if(Character.toLowerCase(marker.getTagName().charAt(i)) != Character.toLowerCase(markerTagName[i + offset]))
							matchesSoFar = false;
					}
				}
				if(matchesSoFar)
					return true;
			}
		}
		return false;
	}

	/**
	 * user method - skeleton.sed
	 *
	 * Return ALL of the regions scannable within the remaining text
	 * Note: for verification use
	 */
	public final List getRegions() {
		List tokens = new ArrayList();
		ITextRegion region = null;
		try {
			region = getNextToken();
			while(region != null) {
				if (region != null) {
					tokens.add(region);
				}
				region = getNextToken();
			}
		}
		catch (StackOverflowError e) {
			Logger.logException(getClass().getName()+": input could not be tokenized correctly at position " + getOffset(), e);//$NON-NLS-1$
			throw e;
		}
		catch (Exception e) {
			// Since this is convenience method and NOT the recommended 
			// way of getting tokens, many errors are simply hidden
			Logger.logException("Exception not handled retrieving regions: " + e.getLocalizedMessage(), e);//$NON-NLS-1$
		}
		return tokens;
	}
	/**
	 * user method - skeleton.sed
	 */
	private final void dump(String s) {
		if (Debug.debugTokenizer) {
			System.out.println(s + " (" + yychar + "-" + //$NON-NLS-2$//$NON-NLS-1$
				(yylength() + yychar) + "):\'" +//$NON-NLS-1$
					StringUtils.escape(yytext()) + "\'");//$NON-NLS-1$
		}
	}
	/* user method  - skeleton.sed */
	public final boolean isEOF() {
		return yy_atEOF;
	}
/* user method - skeleton.sed */
protected final boolean containsTagName(String markerTagName) {
	Iterator blocks = fBlockMarkers.iterator();
	while(blocks.hasNext()) {
		BlockMarker marker = (BlockMarker)blocks.next();
		if(marker.isCaseSensitive()) {
			if(marker.getTagName().equals(markerTagName))
				return true;
		}
		else {
			if(marker.getTagName().equalsIgnoreCase(markerTagName))
				return true;
		}
	}
	return false;
}

  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() {
    if (!yy_eof_done) {
      yy_eof_done = true;
    // do nothing, this is the downstream parser's job

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public String primGetNextToken() throws java.io.IOException {
    int yy_input;
    int yy_action;


    while (true) {

      yychar+= yylength();

      yy_action = -1;

      yy_currentPos = yy_startRead = yy_markedPos;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {
    
          yy_input = yy_advance();

          if ( yy_input == YYEOF ) break yy_forAction;

          int yy_next = yytrans[ yy_rowMap[yy_state] + yycmap[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = YY_ATTRIBUTE[yy_state];
          if ( (yy_attributes & 1) > 0 ) {
            yy_action = yy_state; 
            yy_markedPos = yy_currentPos; 
            if ( (yy_attributes & 8) > 0 ) break yy_forAction;
          }

        }
      }


      switch (yy_action) {    

        case 103: 
          { 
	if(Debug.debugTokenizer)
		dump("\nCharRef");//$NON-NLS-1$
	return JSON_CHAR_REFERENCE;
 }
        case 108: break;
        case 102: 
          { 
	if(Debug.debugTokenizer)
		dump("\ncomment start");//$NON-NLS-1$
	yybegin(ST_JSON_COMMENT);
	return JSON_COMMENT_OPEN;
 }
        case 109: break;
        case 94: 
          { 
	if(Debug.debugTokenizer)
		dump("comment end");//$NON-NLS-1$
	yybegin(YYINITIAL);
	return JSON_COMMENT_CLOSE;
 }
        case 110: break;
        case 93: 
          { 
	if(Debug.debugTokenizer)
		dump("\nPEReference");//$NON-NLS-1$
	return JSON_PE_REFERENCE;
 }
        case 111: break;
        case 90: 
          { 
	if(Debug.debugTokenizer)
		dump("\nEntityRef");//$NON-NLS-1$
	return JSON_ENTITY_REFERENCE;
 }
        case 112: break;
        case 59: 
          { 
        yybegin(YYINITIAL);
	if(Debug.debugTokenizer)
		dump("empty tag close");//$NON-NLS-1$
        return JSON_EMPTY_TAG_CLOSE;
 }
        case 113: break;
        case 51: 
          { 
	if(Debug.debugTokenizer)
		dump("\nend tag open");//$NON-NLS-1$
        yybegin(ST_JSON_TAG_NAME);
        return JSON_END_TAG_OPEN;
 }
        case 114: break;
        case 19: 
          { 
	if(Debug.debugTokenizer)
		dump("LINE FEED");//$NON-NLS-1$
	return WHITE_SPACE;
 }
        case 115: break;
        case 18: 
        case 56: 
          { 
	if(Debug.debugTokenizer)
		dump("non-reference %");//$NON-NLS-1$
	return JSON_CONTENT;
 }
        case 116: break;
        case 15: 
        case 23: 
        case 35: 
          { 
	if(Debug.debugTokenizer)
	dump("\nstart tag open");//$NON-NLS-1$
		dump("\nstart tag open");//$NON-NLS-1$
        yybegin(ST_JSON_TAG_NAME);
        return JSON_TAG_OPEN;
 }
        case 117: break;
        case 14: 
        case 16: 
        case 17: 
        case 21: 
        case 24: 
        case 30: 
        case 36: 
        case 41: 
        case 46: 
          { 
	if (Debug.debugTokenizer)
		System.out.println("!!!unexpected!!!: \"" + yytext() + "\":" + //$NON-NLS-2$//$NON-NLS-1$
			yychar + "-" + (yychar + yylength()));//$NON-NLS-1$
	return UNDEFINED;
 }
        case 118: break;
        case 12: 
        case 49: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist contentspec");//$NON-NLS-1$
	return JSON_ATTLIST_DECL_CONTENT;
 }
        case 119: break;
        case 10: 
        case 44: 
          { 
	if(Debug.debugTokenizer)
		dump("elementdecl contentspec");//$NON-NLS-1$
	return JSON_ELEMENT_DECL_CONTENT;
 }
        case 120: break;
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 11: 
        case 31: 
          { 
	if(Debug.debugTokenizer)
		dump("white space");//$NON-NLS-1$
        return WHITE_SPACE;
 }
        case 121: break;
        case 3: 
        case 22: 
        case 28: 
        case 61: 
        case 95: 
          { 
	if(Debug.debugTokenizer)
		dump("tag name");//$NON-NLS-1$
        yybegin(ST_JSON_ATTRIBUTE_NAME);
        return JSON_TAG_NAME;
 }
        case 122: break;
        case 20: 
          { 
	if(Debug.debugTokenizer)
		dump("comment content");//$NON-NLS-1$
	return scanJSONCommentText();
 }
        case 123: break;
        case 25: 
        case 26: 
        case 27: 
          { 
	if(Debug.debugTokenizer)
		dump("inappropriate tag name");//$NON-NLS-1$
	yybegin(YYINITIAL);
        return JSON_CONTENT;
 }
        case 124: break;
        case 29: 
          { 
	if(Debug.debugTokenizer)
		dump("tag close");//$NON-NLS-1$
	if(isBlockMarker()) {
        	yybegin(ST_BLOCK_TAG_SCAN);
	}
	else
        	yybegin(YYINITIAL);
        return JSON_TAG_CLOSE;
 }
        case 125: break;
        case 32: 
          { 
	if(Debug.debugTokenizer)
		dump("attr name");//$NON-NLS-1$
        yybegin(ST_JSON_EQUALS);
        return JSON_TAG_ATTRIBUTE_NAME;
 }
        case 126: break;
        case 33: 
          { 
	if(Debug.debugTokenizer)
		dump("equals");//$NON-NLS-1$
        yybegin(ST_JSON_ATTRIBUTE_VALUE);
        return JSON_TAG_ATTRIBUTE_EQUALS;
 }
        case 127: break;
        case 34: 
        case 37: 
        case 38: 
        case 66: 
          { 
	if(Debug.debugTokenizer)
		dump("attr value");//$NON-NLS-1$
        yybegin(ST_JSON_ATTRIBUTE_NAME);
        return JSON_TAG_ATTRIBUTE_VALUE;
 }
        case 128: break;
        case 39: 
          { 
	if(Debug.debugTokenizer)
		dump("declaration end");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return JSON_DECLARATION_CLOSE;
 }
        case 129: break;
        case 40: 
        case 42: 
        case 43: 
        case 72: 
        case 73: 
        case 74: 
        case 77: 
        case 97: 
          { 
	if(Debug.debugTokenizer)
		dump("elementdecl name");//$NON-NLS-1$
	yybegin(ST_JSON_ELEMENT_DECLARATION_CONTENT);
	return JSON_ELEMENT_DECL_NAME;
 }
        case 130: break;
        case 45: 
        case 47: 
        case 48: 
        case 82: 
        case 83: 
        case 84: 
        case 87: 
        case 100: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist name");//$NON-NLS-1$
	yybegin(ST_JSON_ATTLIST_DECLARATION_CONTENT);
	return JSON_ATTLIST_DECL_NAME;
 }
        case 131: break;
        case 50: 
          { 
		return doBlockTagScan();
	 }
        case 132: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }    


}
